@model SistemaGestionNotas.ViewModels.DetallesCursoViewModel

@{
    ViewData["Title"] = "Detalle de Calificaciones";
}

<div class="card shadow border-0">

    <img id="logoUniversidad" src="@Url.Content("~/images/logotransparenteblack.png")" alt="Logo de la Universidad" style="display: none;" />

    <div class="card-header bg-light py-3">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
            <div>
                <h4 class="mb-1 text-primary">
                    <i class="fas fa-poll-h me-2"></i>@ViewData["Title"]
                </h4>
                <h6 class="mb-0 fw-bold text-dark">@Model.NombreCurso</h6>
            </div>
            <div class="d-flex gap-2">
                @if (!Model.EsInsolvente)
                {
                    <button class="btn btn-outline-danger" onclick="exportTableToPDF('Reporte de Calificaciones', 'calificacionesTable')">
                        <i class="fas fa-file-pdf me-2"></i> PDF
                    </button>
                }
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Volver
                </a>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (Model.EsInsolvente)
        {
            <div class="alert alert-warning text-center p-4">
                <i class="fas fa-exclamation-triangle fa-2x mb-3"></i>
                <h5 class="alert-heading">Acceso Restringido</h5>
                <p>Tu período de solvencia ha expirado. Por favor, regulariza tu situación para poder ver las calificaciones.</p>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table id="calificacionesTable" class="table table-striped table-hover" style="width:100%">
                    <thead class="table-light">
                        <tr>
                            <th>Nombre del Alumno</th>
                            <th class="text-center">Parcial 1 (15)</th>
                            <th class="text-center">Parcial 2 (15)</th>
                            <th class="text-center">Zona (35)</th>
                            <th class="text-center">Examen (35)</th>
                            <th class="text-center">Nota Final (100)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var alumno in Model.Alumnos)
                        {
                            <tr>
                                <td>@alumno.NombreAlumno</td>
                                <td class="text-center">@alumno.NotaParcialUno</td>
                                <td class="text-center">@alumno.NotaParcialDos</td>
                                <td class="text-center">@alumno.NotaZona</td>
                                <td class="text-center">@alumno.NotaExamen</td>
                                <td class="text-center">
                                    @{
                                        var badgeColor = alumno.NotaFinal >= 61 ? "bg-success" : "bg-danger";
                                    }
                                    <span class="badge @badgeColor fs-6">@alumno.NotaFinal</span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>

    <script>
        $(document).ready(function () {
            // Solo inicializa DataTable si la tabla existe (es decir, si no está insolvente)
            if ($('#calificacionesTable').length > 0) {
                $('#calificacionesTable').DataTable({
                    "dom": '<"row mb-3"<"col-sm-12 col-md-6"l><"col-sm-12 col-md-6"f>>' +
                        '<"row"<"col-sm-12"tr>>' +
                        '<"row"<"col-sm-12 col-md-5"i><"col-sm-12 col-md-7"p>>',
                    language: {
                        url: 'https://cdn.datatables.net/plug-ins/1.13.7/i18n/es-ES.json'
                    }
                });
            }
        });

      
        async function exportTableToPDF(reportTitle, tableID, filename = 'ReporteDeCalificaciones') {
            const { jsPDF } = window.jspdf;
            
            const doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a4' });
            const universityName = "Universidad Tech";
            
            const courseName = "@Html.Raw(Model.NombreCurso)";
            const pageWidth = doc.internal.pageSize.getWidth();
            let finalY = 40; 

            
            try {
                const logo = document.getElementById('logoUniversidad');
                const logoWidth = 45;
                const logoHeight = 45;
                const logoX = 15;
                const logoY = 0;

                
                await new Promise((resolve, reject) => {
                    if (logo.complete && logo.naturalWidth !== 0) {
                        doc.addImage(logo, 'PNG', logoX, logoY, logoWidth, logoHeight);
                        resolve();
                    } else {
                        logo.onload = () => {
                            doc.addImage(logo, 'PNG', logoX, logoY, logoWidth, logoHeight);
                            resolve();
                        };
                        logo.onerror = () => {
                            console.error("No se pudo cargar el logo para el PDF.");
                            reject();
                        };
                       
                        if (logo.complete) {
                            if (logo.naturalWidth === 0) reject();
                            else resolve();
                        }
                    }
                });

            } catch (error) {
                console.warn("Se omitió el logo debido a un error de carga: ", error);
            }

            
            const centerX = pageWidth / 2;

            doc.setFontSize(18);
            doc.setFont("helvetica", "bold");
            doc.text(reportTitle, centerX, 18, { align: 'center' });

           
            doc.setFontSize(14);
            doc.setFont("helvetica", "normal");
            doc.text(courseName, centerX, 26, { align: 'center' });

            
            doc.setFontSize(10);
            doc.text(universityName, centerX, 32, { align: 'center' });

            finalY = 38; 

           
            const finalHead = [['Alumno', 'Parcial 1', 'Parcial 2', 'Zona', 'Examen', 'Nota Final']];
            const body = [];

            const table = $('#' + tableID).DataTable();

            table.rows({ search: 'applied' }).data().each(function (row) {
                const cells = row.map(cell => {
                    
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = cell;
                    return tempDiv.innerText;
                });
                body.push(cells.slice(0, 6));
            });

         
            doc.autoTable({
                head: finalHead,
                body: body,
                startY: finalY,
                theme: 'grid',
                styles: { fontSize: 9, cellPadding: 2, halign: 'center' },
                columnStyles: { 0: { halign: 'left' } }, 

                headStyles: {
                    fillColor: [32, 201, 151], 
                    textColor: [255, 255, 255],
                    fontStyle: 'bold',
                    halign: 'center'
                },
                alternateRowStyles: {
                    fillColor: [245, 245, 245]
                }
            });

            doc.save(filename + ".pdf");
        }
    </script>
}